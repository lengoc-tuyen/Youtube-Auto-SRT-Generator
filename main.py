from pytubefix import YouTube
import subprocess
import os
import re
import sys

# --- CONFIGURATION (C·∫§U H√åNH) ---
OUTPUT_DIR = "subtitles_output"
MODEL_SIZE = "small"  # ƒê·ªïi l√™n "medium" ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c (base -> medium)
LYRICS_FILE_NAME = "ifonly.txt" # T√™n file lyrics
HALLU_DIR = "WhisperHallu"
SYNC_DIR = "WhisperTimeSync"
SYNC_VENV_PYTHON = os.path.join(SYNC_DIR, "venv", "bin", "python")  # Python trong venv c·ªßa WhisperTimeSync

# Th√¥ng tin v·ªÅ model size v√† RAM requirements
MODEL_RAM_INFO = {
    "tiny": "~1GB RAM, t·ªëc ƒë·ªô nhanh, ƒë·ªô ch√≠nh x√°c th·∫•p",
    "base": "~1GB RAM, t·ªëc ƒë·ªô nhanh, ƒë·ªô ch√≠nh x√°c kh√°",
    "small": "~2GB RAM, t·ªëc ƒë·ªô trung b√¨nh, ƒë·ªô ch√≠nh x√°c t·ªët",
    "medium": "~5GB RAM, t·ªëc ƒë·ªô ch·∫≠m, ƒë·ªô ch√≠nh x√°c r·∫•t t·ªët",
    "large": "~10GB RAM, t·ªëc ƒë·ªô r·∫•t ch·∫≠m, ƒë·ªô ch√≠nh x√°c xu·∫•t s·∫Øc"
}

# --- UTILITIES (H√ÄM TI·ªÜN √çCH) ---
def clean_filename(name: str) -> str:
    cleanedName = re.sub(r'[\\/:*?"<>|]', '', name)
    return cleanedName.strip()[:100]


def download_audio(url: str, output_path: str) -> tuple[str, str]:
    try:
        yt = YouTube(url) 
        
        video_title = clean_filename(yt.title)
        audio_stream = yt.streams.filter(only_audio=True).order_by('abr').desc().first()
        
        if not audio_stream:
            raise Exception("Kh√¥ng t√¨m th·∫•y lu·ªìng audio kh·∫£ d·ª•ng.")
            
        downloaded_file = audio_stream.download(
            output_path=output_path, 
            filename=f"{video_title}.{audio_stream.subtype}"
        )
        print(f"‚úÖ T·∫£i xu·ªëng ho√†n t·∫•t: {os.path.basename(downloaded_file)}")
        
        return downloaded_file, video_title
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i xu·ªëng (PyTubeFix): {e}")
        sys.exit(1)

def run_alignment_process(audio_path, lyrics_path, video_title):
    print("\n=======================================================")
    print(" B·∫ÆT ƒê·∫¶U QUY TR√åNH FORCED ALIGNMENT CHUY√äN S√ÇU")
    print("=======================================================")
    print(f"‚öôÔ∏è  Model size: {MODEL_SIZE} ({MODEL_RAM_INFO.get(MODEL_SIZE, 'Unknown')})")
    
    # 1. T√™n file output trung gian
    audio_stem = os.path.splitext(os.path.basename(audio_path))[0]
    
    # T√™n file SRT cu·ªëi c√πng (d√πng vƒÉn b·∫£n t·ª´ lyrics_path)
    final_srt_name = f"{video_title}_aligned.srt"
    final_srt_path = os.path.join(OUTPUT_DIR, final_srt_name)
    
    # ----------------------------------------------
    # GIAI ƒêO·∫†N 1 & 2: T·∫†O D·∫§U TH·ªúI GIAN NHUY·ªÑN (WHISPERHALLU)
    # ----------------------------------------------
    hallu_output_path = os.path.join(OUTPUT_DIR, f"{audio_stem}_hallu_timing.srt")
    
    try:
        print("\nƒêang ch·∫°y WhisperHallu ƒë·ªÉ t·∫°o Timing Source...")
        
        # ƒëo·∫°n n√†y l√† chu·∫©n b·ªã ƒë·ªÉ ch·∫°y Hallu
        hallu_command = [
            sys.executable,  # ƒê·∫£m b·∫£o d√πng ƒë√∫ng phi√™n b·∫£n python
            os.path.join(HALLU_DIR, "transcribeHallu.py"), 
            "--input", audio_path, 
            "--output", OUTPUT_DIR,
            "--model", MODEL_SIZE,
            "--language", "en" 
        ]
        
        # Ch·∫°y n√®
        subprocess.run(hallu_command, check=True, capture_output=True, text=True)
        print("‚úÖ  ƒê√£ t·∫°o Timing Source (c·∫•p ƒë·ªô t·ª´).")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y WhisperHallu (Giai ƒëo·∫°n 1/2). Ki·ªÉm tra file log/c·∫•u h√¨nh tool!")
        print(f"Chi ti·∫øt l·ªói:\n{e.stderr}")
        return
        
    # ----------------------------------------------
    # GIAI ƒêO·∫†N 3: TRANSCRIBE V·ªöI WHISPER
    # ----------------------------------------------
    
    try:
        print("\n[GIAI ƒêO·∫†N 3] ƒêang ch·∫°y WhisperTimeSync ƒë·ªÉ align lyrics v·ªõi audio...")
        print(f"üí° ƒêang s·ª≠ d·ª•ng model '{MODEL_SIZE}' - {MODEL_RAM_INFO.get(MODEL_SIZE, '')}")
        print(f"üìù Lyrics file: {lyrics_path}")
        
        # G·ªçi transcribe.py v·ªõi ƒë√∫ng tham s·ªë: <audio_file> <lyrics_file> <model_size>
        sync_command = [
            SYNC_VENV_PYTHON,  # D√πng Python t·ª´ venv c·ªßa WhisperTimeSync
            os.path.join(SYNC_DIR, "transcribe.py"), 
            audio_path,      # Tham s·ªë 1: file audio
            lyrics_path,     # Tham s·ªë 2: file lyrics chu·∫©n
            MODEL_SIZE       # Tham s·ªë 3: k√≠ch th∆∞·ªõc model
        ]

        result = subprocess.run(sync_command, check=True, capture_output=True, text=True)
        print(result.stdout)  # In output t·ª´ transcribe.py
        print("‚úÖ Giai ƒëo·∫°n 3 ho√†n t·∫•t. ƒê√£ t·∫°o file SRT v·ªõi lyrics chu·∫©n + timestamps.")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y WhisperTimeSync (Giai ƒëo·∫°n 3).")
        print(f"Chi ti·∫øt l·ªói:\n{e.stderr}")
        print(f"\nüí° G·ª¢I √ù: N·∫øu b·ªã l·ªói RAM, h√£y th·ª≠ model nh·ªè h∆°n:")
        print(f"   - S·ª≠a MODEL_SIZE = 'tiny' ho·∫∑c 'base' trong main.py")
        return

    print("\n--- ‚úÖ QUY TR√åNH ALIGNMENT HO√ÄN T·∫§T ---")
    print(f"‚≠ê File SRT ch√≠nh x√°c c·ªßa b·∫°n n·∫±m ·ªü: {final_srt_path}")
    print("------------------------------------------")



# --- MAIN LOGIC (ƒêi·ªÅu ph·ªëi Quy tr√¨nh Alignment) ---
def main():
    print("--- Pure Forced Alignment Project ---")
    url = input("Vui l√≤ng nh·∫≠p Link YouTube (URL): ").strip()
    
    if not url:
        print("URL must not be empty!")
        return

    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
        
    audio_file_path = ""
    try:
        # B1: T·∫£i file audio
        print("\n‚è≥ ƒêang t·∫£i audio t·ª´ YouTube...")
        audio_result_tuple = download_audio(url, OUTPUT_DIR) 
        print("‚úÖ Audio ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng.")
        audio_file_path = audio_result_tuple[0] 
        video_title = audio_result_tuple[1]

        # B2: KI·ªÇM TRA FILE LYRICS (B∆∞·ªõc m·ªõi quan tr·ªçng)
        lyrics_path = os.path.join(OUTPUT_DIR, LYRICS_FILE_NAME)
        if not os.path.exists(lyrics_path):
            print("\n=======================================================")
            print(f"üõë B∆Ø·ªöC QUAN TR·ªåNG: Vui l√≤ng t·∫°o file Lyrics.")
            print(f"   T·∫°o file: {lyrics_path}")
            print("   ƒêi·ªÅn l·ªùi b√†i h√°t ch√≠nh x√°c v√†o ƒë√≥ (m·ªói c√¢u/ƒëo·∫°n m·ªôt d√≤ng m·ªõi).")
            print("   Sau ƒë√≥, ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh.")
            print("=======================================================")
            return
        
        print(f"‚úÖ ƒê√£ t√¨m th·∫•y file Lyrics t·∫°i: {LYRICS_FILE_NAME}")
        
        # B3: TRI·ªÇN KHAI LOGIC FORCED ALIGNMENT T·∫†I ƒê√ÇY
        
        print("\n‚è≥ Qu√° tr√¨nh Alignment chuy√™n s√¢u s·∫Ω b·∫Øt ƒë·∫ßu...")
        run_alignment_process(audio_file_path, lyrics_path, video_title)

    except Exception as e:
        print(f"‚ùå ƒê√£ x·∫£y ra l·ªói: {e}")
    
    finally:
        # Gi·ªØ l·∫°i logic x√≥a file t·∫°m
        if audio_file_path and os.path.exists(audio_file_path):
            os.remove(audio_file_path)
            print(f"‚úÖ ƒê√£ x√≥a file audio t·∫°m: {os.path.basename(audio_file_path)}")


if __name__ == "__main__":
    main()